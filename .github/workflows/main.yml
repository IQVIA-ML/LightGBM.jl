name: CI
on:
  pull_request:
    branches: ['master']
  push:
    branches: ['master']
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version: ['1.0', '1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7']
        os:  [windows-latest, ubuntu-latest, macOS-latest]
        #os: [ubuntu-latest] # temporarily restrict to linux only
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Setup MacOS libomp
        if: matrix.os == 'macOS-latest'
        run: |
          ls  /usr/local/opt/
          brew install libomp
          ls  /usr/local/opt/libomp/lib/libomp.dylib
      - name: Download LGBM examles
        shell: python
        run: |
          from __future__ import print_function
          import importlib
          import sys
          req = importlib.import_module("urllib") if sys.version_info < (3, ) else importlib.import_module("urllib.request")
          req.urlretrieve("https://github.com/microsoft/LightGBM/archive/v2.3.1.tar.gz", "lgbm.tar")
      - run: tar -xvf lgbm.tar
        shell: bash
        name: Untar LGBM examples
      - run: julia --color=yes --project -e 'using Pkg; Pkg.build(); Pkg.test(coverage=true);'
        continue-on-error: false
        env:
          LIGHTGBM_EXAMPLES_PATH: LightGBM-2.3.1
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@latest
      - name: Build package to grab binary
        run: julia --project -e 'using Pkg; Pkg.build(); Pkg.instantiate()'
      - name: Instantiate docs
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
      - name: Build docs and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For authentication with GitHub Actions token
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # For authentication with SSH deploy key
        run: julia --project=docs/ docs/make.jl
